{"id": 1, "description": "Please create one robotic workstation for welding, you should use at least one Kuka Robot, one Welding Table, and one Guarding from the 3D library to build this scene.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\nList<DirectoryInfo> guardingModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Table\") && directoryInfo.Name.Contains(\"Weldingtable\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"KUKA\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Guarding\"))\n    {\n        guardingModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2500.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nif (guardingModels.Count > 0)\n{\n    DirectoryInfo guardingModel1 = guardingModels[rand.Next(0, guardingModels.Count)];\n    string guarding1Name = Path.GetFileNameWithoutExtension(guardingModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataGuarding1 = new TxInsertComponentCreationData(guarding1Name, guardingModel1.FullName);\n    ITxComponent txComponentGuarding1 = txPhysicalRoot.InsertComponent(txInsertDataGuarding1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject guardingObj1 = (ITxLocatableObject)txComponentGuarding1;\n    guardingObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the guarding in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 2, "description": "Please create one robotic workstation for welding from the TX root 3D library, you should upload one random Robot in the scene at first.", "code": "string rootDir = TxApplication.SystemRootDirectory;\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 3, "description": "Please create one welding workstation, you should use two Robots and one Table, the robots are placed near the table within 2.5 meters.", "code": "string rootDir = TxApplication.SystemRootDirectory;\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2000.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = rand.Next(0, 360) * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = -2500.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = rand.Next(0, 360) * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 4, "description": "Please create one welding workstation from the TX root 3D library, you should use two Robots and one Table, the robots are placed facing around the table within 2.5 meters.", "code": "string rootDir = TxApplication.SystemRootDirectory;\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2500.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = -2000.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 5, "description": "Please create one welding workstation with three Robots and one Table in the scene, and the robots are placed around the table.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2500.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = -2500.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n\n    DirectoryInfo robotModel3 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot3Name = Path.GetFileNameWithoutExtension(robotModel3.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot3 = new TxInsertComponentCreationData(robot3Name, robotModel3.FullName);\n    ITxComponent txComponentRobot3 = txPhysicalRoot.InsertComponent(txInsertDataRobot3);\n\n    double transXValue3 = 0.0;\n    double transYValue3 = 2000.0;\n    double rotValue3 = -90.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ3 = new TxTransformation(new TxVector(transXValue3, transYValue3, 0.0), new TxVector(0.0, 0.0, rotValue3), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj3 = (ITxLocatableObject)txComponentRobot3;\n    robotObj3.AbsoluteLocation *= txTransTransXYRotZ3;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 6, "description": "Please create one welding station, you should use one Robot located at [-1500, 1500, 0].", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = -1500.0;\n    double transYValue1 = 1500.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 7, "description": "Please create one robotic workstation for spot welding equipped with ABB Robot IRB6600.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        FileInfo[] robotFiles = directoryInfo.GetFiles(\"*irb6600*\", SearchOption.TopDirectoryOnly);\n        if (robotFiles.Length != 0)\n        {\n            robotModels.Add(directoryInfo);\n        }\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 8, "description": "Please create one general robotic workstation for spot welding.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\nList<DirectoryInfo> guardingModels = new List<DirectoryInfo>();\nList<DirectoryInfo> cabinetModels = new List<DirectoryInfo>();\nList<DirectoryInfo> conveyorModels = new List<DirectoryInfo>();\nList<DirectoryInfo> standModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Guarding\"))\n    {\n        guardingModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Cabinet\"))\n    {\n        cabinetModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Conveyor\"))\n    {\n        conveyorModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Valvestand\"))\n    {\n        standModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = -2000.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\nif (guardingModels.Count > 0)\n{\n    DirectoryInfo guardingModel1 = guardingModels[rand.Next(0, guardingModels.Count)];\n    string guarding1Name = Path.GetFileNameWithoutExtension(guardingModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataGuarding1 = new TxInsertComponentCreationData(guarding1Name, guardingModel1.FullName);\n    ITxComponent txComponentGuarding1 = txPhysicalRoot.InsertComponent(txInsertDataGuarding1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject guardingObj1 = (ITxLocatableObject)txComponentGuarding1;\n    guardingObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the guarding in the 3D library.\");\n}\n\nif (cabinetModels.Count > 0)\n{\n    DirectoryInfo cabinetModel1 = cabinetModels[rand.Next(0, cabinetModels.Count)];\n    string cabinet1Name = Path.GetFileNameWithoutExtension(cabinetModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataCabinet1 = new TxInsertComponentCreationData(cabinet1Name, cabinetModel1.FullName);\n    ITxComponent txComponentCabinet1 = txPhysicalRoot.InsertComponent(txInsertDataCabinet1);\n\n    double transXValue1 = (double)rand.Next(-1000, 1000);\n    double transYValue1 = 4500.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject cabinetObj1 = (ITxLocatableObject)txComponentCabinet1;\n    cabinetObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the cabinet in the 3D library.\");\n}\n\nif (conveyorModels.Count > 0 && rand.Next(0, 2) == 1)\n{\n    DirectoryInfo conveyorModel1 = conveyorModels[rand.Next(0, conveyorModels.Count)];\n    string conveyor1Name = Path.GetFileNameWithoutExtension(conveyorModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataConveyor1 = new TxInsertComponentCreationData(conveyor1Name, conveyorModel1.FullName);\n    ITxComponent txComponentConveyor1 = txPhysicalRoot.InsertComponent(txInsertDataConveyor1);\n\n    double transXValue1 = (double)rand.Next(5500, 6500);\n    double transYValue1 = -1000.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject conveyorObj1 = (ITxLocatableObject)txComponentConveyor1;\n    conveyorObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the conveyor in the 3D library.\");\n}\n\nif (standModels.Count > 0 && rand.Next(0, 2) == 1)\n{\n    DirectoryInfo standModel1 = standModels[rand.Next(0, standModels.Count)];\n    string stand1Name = Path.GetFileNameWithoutExtension(standModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataStand1 = new TxInsertComponentCreationData(stand1Name, standModel1.FullName);\n    ITxComponent txComponentStand1 = txPhysicalRoot.InsertComponent(txInsertDataStand1);\n\n    double transXValue1 = (double)rand.Next(-2000, 0);\n    double transYValue1 = (double)rand.Next(-3000, -2000);\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject standObj1 = (ITxLocatableObject)txComponentStand1;\n    standObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the valvestand in the 3D library.\");\n}\nTxApplication.RefreshDisplay();"}
{"id": 9, "description": "Please create one robotic workstation for welding, you should use the 3D models from the 3D library to build this scene, select the possible models, and make the layout reasonable.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\nList<DirectoryInfo> guardingModels = new List<DirectoryInfo>();\nList<DirectoryInfo> cabinetModels = new List<DirectoryInfo>();\nList<DirectoryInfo> conveyorModels = new List<DirectoryInfo>();\nList<DirectoryInfo> standModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Guarding\"))\n    {\n        guardingModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Cabinet\"))\n    {\n        cabinetModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Conveyor\"))\n    {\n        conveyorModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Valvestand\"))\n    {\n        standModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = -2000.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = 2500.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\nif (guardingModels.Count > 0)\n{\n    DirectoryInfo guardingModel1 = guardingModels[rand.Next(0, guardingModels.Count)];\n    string guarding1Name = Path.GetFileNameWithoutExtension(guardingModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataGuarding1 = new TxInsertComponentCreationData(guarding1Name, guardingModel1.FullName);\n    ITxComponent txComponentGuarding1 = txPhysicalRoot.InsertComponent(txInsertDataGuarding1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject guardingObj1 = (ITxLocatableObject)txComponentGuarding1;\n    guardingObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the guarding in the 3D library.\");\n}\n\nif (cabinetModels.Count > 0)\n{\n    DirectoryInfo cabinetModel1 = cabinetModels[rand.Next(0, cabinetModels.Count)];\n    string cabinet1Name = Path.GetFileNameWithoutExtension(cabinetModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataCabinet1 = new TxInsertComponentCreationData(cabinet1Name, cabinetModel1.FullName);\n    ITxComponent txComponentCabinet1 = txPhysicalRoot.InsertComponent(txInsertDataCabinet1);\n\n    double transXValue1 = (double)rand.Next(-1000, 1000);\n    double transYValue1 = 4500.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject cabinetObj1 = (ITxLocatableObject)txComponentCabinet1;\n    cabinetObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the cabinet in the 3D library.\");\n}\n\nif (conveyorModels.Count > 0 && rand.Next(0, 2) == 1)\n{\n    DirectoryInfo conveyorModel1 = conveyorModels[rand.Next(0, conveyorModels.Count)];\n    string conveyor1Name = Path.GetFileNameWithoutExtension(conveyorModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataConveyor1 = new TxInsertComponentCreationData(conveyor1Name, conveyorModel1.FullName);\n    ITxComponent txComponentConveyor1 = txPhysicalRoot.InsertComponent(txInsertDataConveyor1);\n\n    double transXValue1 = (double)rand.Next(5500, 6500);\n    double transYValue1 = -1000.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject conveyorObj1 = (ITxLocatableObject)txComponentConveyor1;\n    conveyorObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the conveyor in the 3D library.\");\n}\n\nif (standModels.Count > 0 && rand.Next(0, 2) == 1)\n{\n    DirectoryInfo standModel1 = standModels[rand.Next(0, standModels.Count)];\n    string stand1Name = Path.GetFileNameWithoutExtension(standModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataStand1 = new TxInsertComponentCreationData(stand1Name, standModel1.FullName);\n    ITxComponent txComponentStand1 = txPhysicalRoot.InsertComponent(txInsertDataStand1);\n\n    double transXValue1 = (double)rand.Next(-2000, 0);\n    double transYValue1 = (double)rand.Next(-3000, -2000);\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject standObj1 = (ITxLocatableObject)txComponentStand1;\n    standObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the valvestand in the 3D library.\");\n}\nTxApplication.RefreshDisplay();"}
{"id": 10, "description": "Please create one welding station using two ABB Robots, the workstation is guarded by the Guarding.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> guardingModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"ABB\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Guarding\"))\n    {\n        guardingModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = -2000.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = 2500.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\nif (guardingModels.Count > 0)\n{\n    DirectoryInfo guardingModel1 = guardingModels[rand.Next(0, guardingModels.Count)];\n    string guarding1Name = Path.GetFileNameWithoutExtension(guardingModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataGuarding1 = new TxInsertComponentCreationData(guarding1Name, guardingModel1.FullName);\n    ITxComponent txComponentGuarding1 = txPhysicalRoot.InsertComponent(txInsertDataGuarding1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject guardingObj1 = (ITxLocatableObject)txComponentGuarding1;\n    guardingObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the guarding in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 11, "description": "Please create one 3D scene for spot welding station. This scene should include some objects like Robot, Table, Guarding and Cabinet.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\nList<DirectoryInfo> guardingModels = new List<DirectoryInfo>();\nList<DirectoryInfo> cabinetModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Guarding\"))\n    {\n        guardingModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Cabinet\"))\n    {\n        cabinetModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = -2000.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nif (guardingModels.Count > 0)\n{\n    DirectoryInfo guardingModel1 = guardingModels[rand.Next(0, guardingModels.Count)];\n    string guarding1Name = Path.GetFileNameWithoutExtension(guardingModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataGuarding1 = new TxInsertComponentCreationData(guarding1Name, guardingModel1.FullName);\n    ITxComponent txComponentGuarding1 = txPhysicalRoot.InsertComponent(txInsertDataGuarding1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject guardingObj1 = (ITxLocatableObject)txComponentGuarding1;\n    guardingObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the guarding in the 3D library.\");\n}\nif (cabinetModels.Count > 0)\n{\n    DirectoryInfo cabinetModel1 = cabinetModels[rand.Next(0, cabinetModels.Count)];\n    string cabinet1Name = Path.GetFileNameWithoutExtension(cabinetModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataCabinet1 = new TxInsertComponentCreationData(cabinet1Name, cabinetModel1.FullName);\n    ITxComponent txComponentCabinet1 = txPhysicalRoot.InsertComponent(txInsertDataCabinet1);\n\n    double transXValue1 = (double)rand.Next(-1000, 1000);\n    double transYValue1 = 4500.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject cabinetObj1 = (ITxLocatableObject)txComponentCabinet1;\n    cabinetObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n\n    DirectoryInfo cabinetModel2 = cabinetModels[rand.Next(0, cabinetModels.Count)];\n    string cabinet2Name = Path.GetFileNameWithoutExtension(cabinetModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataCabinet2 = new TxInsertComponentCreationData(cabinet2Name, cabinetModel2.FullName);\n    ITxComponent txComponentCabinet2 = txPhysicalRoot.InsertComponent(txInsertDataCabinet2);\n\n    double transXValue2 = -4000.0;\n    double transYValue2 = (double)rand.Next(-1000, 1000);\n    double rotValue2 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject cabinetObj2 = (ITxLocatableObject)txComponentCabinet2;\n    cabinetObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the cabinet in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 12, "description": "Help me to establish a welding work cell. It contains 3 ABB Robots, one for pick and place and the other two for spot welding, one Conveyor for transfer.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> conveyorModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"ABB\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Conveyor\"))\n    {\n        conveyorModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2500.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = -2500.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n\n    DirectoryInfo robotModel3 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot3Name = Path.GetFileNameWithoutExtension(robotModel3.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot3 = new TxInsertComponentCreationData(robot3Name, robotModel3.FullName);\n    ITxComponent txComponentRobot3 = txPhysicalRoot.InsertComponent(txInsertDataRobot3);\n\n    double transXValue3 = 0.0;\n    double transYValue3 = 2000.0;\n    double rotValue3 = -90.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ3 = new TxTransformation(new TxVector(transXValue3, transYValue3, 0.0), new TxVector(0.0, 0.0, rotValue3), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj3 = (ITxLocatableObject)txComponentRobot3;\n    robotObj3.AbsoluteLocation *= txTransTransXYRotZ3;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nif (conveyorModels.Count > 0)\n{\n    DirectoryInfo conveyorModel1 = conveyorModels[rand.Next(0, conveyorModels.Count)];\n    string conveyor1Name = Path.GetFileNameWithoutExtension(conveyorModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataConveyor1 = new TxInsertComponentCreationData(conveyor1Name, conveyorModel1.FullName);\n    ITxComponent txComponentConveyor1 = txPhysicalRoot.InsertComponent(txInsertDataConveyor1);\n\n    double transXValue1 = (double)rand.Next(5500, 6500);\n    double transYValue1 = -1000.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject conveyorObj1 = (ITxLocatableObject)txComponentConveyor1;\n    conveyorObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the conveyor in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 13, "description": "Please create one robotic workstation for welding, you should use the one Kuka Robot model and one Table model from the 3D library to build this scene, the robot is at the location facing the table for 2.2 meters.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"KUKA\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2200.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 14, "description": "Please create a welding station in the Process Simulate scene. You should use two robot models from the 3D library and a table model. The first robot is located at [-1800, 0, 0], the other robot faces the first robot, and the distance between the two robots is 4.5 meters.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Table\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = -1800.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = -1800.0 + 2700.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 15, "description": "Please create one robotic workstation for welding, including a Kuka Robot positioned at [1000, 1000, 0].", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"KUKA\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 1000.0;\n    double transYValue1 = 1000.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 16, "description": "Please create one welding station using a Robot and a Welding Table. The robot is facing the table.", "code": "string rootDir = TxApplication.SystemRootDirectory;\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Table\") && directoryInfo.Name.Contains(\"Weldingtable\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2500.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 17, "description": "Please create a robotic assembly line for welding that includes a Kuka Robot, a Welding Table, and a Guarding.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\nList<DirectoryInfo> guardingModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Table\") && directoryInfo.Name.Contains(\"Weldingtable\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"KUKA\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Guarding\"))\n    {\n        guardingModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = -2000.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\nif (guardingModels.Count > 0)\n{\n    DirectoryInfo guardingModel1 = guardingModels[rand.Next(0, guardingModels.Count)];\n    string guarding1Name = Path.GetFileNameWithoutExtension(guardingModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataGuarding1 = new TxInsertComponentCreationData(guarding1Name, guardingModel1.FullName);\n    ITxComponent txComponentGuarding1 = txPhysicalRoot.InsertComponent(txInsertDataGuarding1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject guardingObj1 = (ITxLocatableObject)txComponentGuarding1;\n    guardingObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the guarding in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 18, "description": "Please set up a welding station with one ABB Robot, and incorporate a Guarding unit to secure the station.", "code": "string rootDir = TxApplication.SystemRootDirectory;\n\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> guardingModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"ABB\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Guarding\"))\n    {\n        guardingModels.Add(directoryInfo);\n    }\n}\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\nif (guardingModels.Count > 0)\n{\n    DirectoryInfo guardingModel1 = guardingModels[rand.Next(0, guardingModels.Count)];\n    string guarding1Name = Path.GetFileNameWithoutExtension(guardingModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataGuarding1 = new TxInsertComponentCreationData(guarding1Name, guardingModel1.FullName);\n    ITxComponent txComponentGuarding1 = txPhysicalRoot.InsertComponent(txInsertDataGuarding1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject guardingObj1 = (ITxLocatableObject)txComponentGuarding1;\n    guardingObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the guarding in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 19, "description": "Please create a welding cell with two Kuka Robots and a Welding Table, ensuring the Kuka Robots are positioned within 2.5 meters of the Welding Table.", "code": "string rootDir = TxApplication.SystemRootDirectory;\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> tableModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"KUKA\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Table\") && directoryInfo.Name.Contains(\"Weldingtable\"))\n    {\n        tableModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (tableModels.Count > 0)\n{\n    DirectoryInfo tableModel1 = tableModels[rand.Next(0, tableModels.Count)];\n    string table1Name = Path.GetFileNameWithoutExtension(tableModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataTable1 = new TxInsertComponentCreationData(table1Name, tableModel1.FullName);\n    ITxComponent txComponentTable1 = txPhysicalRoot.InsertComponent(txInsertDataTable1);\n\n    double transXValue1 = 0.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject tableObj1 = (ITxLocatableObject)txComponentTable1;\n    tableObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the table in the 3D library.\");\n}\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2500.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = rand.Next(0, 360) * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = -2500.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = rand.Next(0, 360) * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nTxApplication.RefreshDisplay();"}
{"id": 20, "description": "Establish a welding workcell. It contains 2 Kuka Robots for spot welding, one Conveyor for transfer, and one Cabinet.", "code": "string rootDir = TxApplication.SystemRootDirectory;\nstring weldingLibPath = Path.Combine(rootDir, \"Welding\");\nstring[] weldingModels = Directory.GetDirectories(weldingLibPath, \"*.cojt\", SearchOption.TopDirectoryOnly);\n\nList<DirectoryInfo> robotModels = new List<DirectoryInfo>();\nList<DirectoryInfo> cabinetModels = new List<DirectoryInfo>();\nList<DirectoryInfo> conveyorModels = new List<DirectoryInfo>();\n\nforeach (string model in weldingModels)\n{\n    DirectoryInfo directoryInfo = new DirectoryInfo(model);\n\n    if (directoryInfo.Name.Contains(\"Robot\") && directoryInfo.Name.Contains(\"KUKA\"))\n    {\n        robotModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Cabinet\"))\n    {\n        cabinetModels.Add(directoryInfo);\n    }\n    if (directoryInfo.Name.Contains(\"Conveyor\"))\n    {\n        conveyorModels.Add(directoryInfo);\n    }\n}\n\nRandom rand = new Random();\nTxPhysicalRoot txPhysicalRoot = TxApplication.ActiveDocument.PhysicalRoot;\n\nif (robotModels.Count > 0)\n{\n    DirectoryInfo robotModel1 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot1Name = Path.GetFileNameWithoutExtension(robotModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot1 = new TxInsertComponentCreationData(robot1Name, robotModel1.FullName);\n    ITxComponent txComponentRobot1 = txPhysicalRoot.InsertComponent(txInsertDataRobot1);\n\n    double transXValue1 = 2500.0;\n    double transYValue1 = 0.0;\n    double rotValue1 = 180.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ1 = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj1 = (ITxLocatableObject)txComponentRobot1;\n    robotObj1.AbsoluteLocation *= txTransTransXYRotZ1;\n\n    DirectoryInfo robotModel2 = robotModels[rand.Next(0, robotModels.Count)];\n    string robot2Name = Path.GetFileNameWithoutExtension(robotModel2.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataRobot2 = new TxInsertComponentCreationData(robot2Name, robotModel2.FullName);\n    ITxComponent txComponentRobot2 = txPhysicalRoot.InsertComponent(txInsertDataRobot2);\n\n    double transXValue2 = -2500.0;\n    double transYValue2 = 0.0;\n    double rotValue2 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ2 = new TxTransformation(new TxVector(transXValue2, transYValue2, 0.0), new TxVector(0.0, 0.0, rotValue2), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject robotObj2 = (ITxLocatableObject)txComponentRobot2;\n    robotObj2.AbsoluteLocation *= txTransTransXYRotZ2;\n}\nelse\n{\n    output.Write(\"I can't find the robot in the 3D library.\");\n}\n\nif (cabinetModels.Count > 0)\n{\n    DirectoryInfo cabinetModel1 = cabinetModels[rand.Next(0, cabinetModels.Count)];\n    string cabinet1Name = Path.GetFileNameWithoutExtension(cabinetModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataCabinet1 = new TxInsertComponentCreationData(cabinet1Name, cabinetModel1.FullName);\n    ITxComponent txComponentCabinet1 = txPhysicalRoot.InsertComponent(txInsertDataCabinet1);\n\n    double transXValue1 = (double)rand.Next(-1000, 1000);\n    double transYValue1 = 4500.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject cabinetObj1 = (ITxLocatableObject)txComponentCabinet1;\n    cabinetObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the cabinet in the 3D library.\");\n}\n\nif (conveyorModels.Count > 0)\n{\n    DirectoryInfo conveyorModel1 = conveyorModels[rand.Next(0, conveyorModels.Count)];\n    string conveyor1Name = Path.GetFileNameWithoutExtension(conveyorModel1.Name) + \"_\" + DateTime.Now.ToString(\"yyyy-MM-dd-HH-mm-ss\");\n    TxInsertComponentCreationData txInsertDataConveyor1 = new TxInsertComponentCreationData(conveyor1Name, conveyorModel1.FullName);\n    ITxComponent txComponentConveyor1 = txPhysicalRoot.InsertComponent(txInsertDataConveyor1);\n\n    double transXValue1 = (double)rand.Next(5500, 6500);\n    double transYValue1 = -1000.0;\n    double rotValue1 = 0.0 * Math.PI / 180.0;\n    TxTransformation txTransTransXYRotZ = new TxTransformation(new TxVector(transXValue1, transYValue1, 0.0), new TxVector(0.0, 0.0, rotValue1), TxTransformation.TxRotationType.RPY_ZYX);\n    ITxLocatableObject conveyorObj1 = (ITxLocatableObject)txComponentConveyor1;\n    conveyorObj1.AbsoluteLocation *= txTransTransXYRotZ;\n}\nelse\n{\n    output.Write(\"I can't find the conveyor in the 3D library.\");\n}\nTxApplication.RefreshDisplay();"}
